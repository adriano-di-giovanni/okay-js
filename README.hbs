# Okay

Okay is a minimalistic functional validation library for Node.js and the browser.

It helps you streamline the validation of arguments, data and forms.

Okay aims to set you free from learning different, framework or environment dependent, convoluted APIs to validate your data. You can run it on the server as well as on the client. You can use it together with any library of your choice.

Okay depends on [lodash](https://lodash.com/).

It is tiny (< 1kB).

## Installation

```
npm install okay-js --save
```

## Usage

Okay helps you validate your data using **rules**.

A rule is a [pure function](https://en.wikipedia.org/wiki/Pure_function). It accepts a mandatory `value` argument and an optional `context`; it always returns a `Boolean`. If `value` is a function, it is invoked in order to get the actual value.

Rules are generated by **rule creators**.

A rule creator is a [higher order function](https://en.wikipedia.org/wiki/Higher-order_function) that creates a rule. It eventually accepts a single `param` argument. If `param` is a function, it is invoked in order to get the actual param. Okay's API mainly exposes rule creators. Also, you can define your own rule creators (and rules).

Let's see an example:

```javascript
var gt = okay.gt;
var validate = gt(5);
console.log(validate(6)); // true
console.log(validate(5)); // false
```

In the example above, <code>[okay.gt](#module_okay.gt)</code> is a rule creator. We call `gt(5)` in order to create a rule. The rule validates that a given value is greater than 5.

### Composing rules

We often need to validate our data against more than one rule. Okay lets you compose rules to perform complex validation:

```javascript
var gt = okay.gt;
var lt = okay.lt;
var all = okay.all;

var validate = all(gt(0), lt(5));

console.log(validate(-1)); // false
console.log(validate(6)); // false
console.log(validate(3)); // true
```

You can compose rules using <code>[okay.all](#module_okay.all)</code> (logical AND) and <code>[okay.any](#module_okay.any)</code> (logical OR) creators.

### Perform actions on validation

You can use the rule creator <code>[okay.callIf](#module_okay.callIf)</code> to perform actions on validation.

Let's see an example:

```javascript
var callIf = okay.callIf;
var string = okay.string;
var thenCallback = function (value) {
  var message = ':value is a string'
    .replace(':value', value);
  console.log(message);
};
var elseCallback = function (value) {
  var message = ':value is not a string'
    .replace(':value', value);
  console.log(message);
};
var validate = callIf(string(), thenCallback, elseCallback);
validate('1'); // 1 is a string
validate(1); // 1 is not a string
```

### Creating custom rules

You can create your own custom rules using <code>[okay.createRule](#module_okay.createRule)</code>

```
var createRule = okay.createRule;

var resolve = function (value, param) {
  return value != param;
};
var ne = function (param) {
  return createRule(resolve, param);
};

var validate = ne(4);
console.log(validate(3)); // false
console.log(validate(4)); // true
```

## API Reference

{{#module name="okay"}}
{{>body~}}
{{>member-index~}}
{{>separator~}}
{{>members~}}
{{/module}}
